{"software":{"name":"node_red_deploy","major":null,"minor":1,"release_level":"Beta","patch":null,"license_name":"apache_v2","license_label":"Apache v2","license_sourceurl":"http://www.apache.org/licenses/LICENSE-2.0.html","full_title":"node red deploy","short_title":"node_red_deploy","description":"","icon_url":"","home_page_url":"","support_page_url":"","about":"","language":"node","framework":"node6.9","deployment_type":"web","web_root_directory":"","first_run_url":"","publisher":"engines","blocking_worker_name":null,"required_memory":256,"recommended_memory":256,"http_protocol":"https_only","framework_port_overide":null,"custom_start_script":"#!/bin/bash\r\nPID_FILE=/tmp/node_red.pid\r\nexport PID_FILE\r\n. /home/trap.sh\r\nnpm config set strict-ssl false\r\nnode-red --userDir /home/fs/node-red-data/ \u0026\r\necho $! \u003e/tmp/node_red.pid\r\n\r\ntouch /engines/var/run/flags/startup_complete\r\nwait\r\nrm /engines/var/run/flags/startup_complete ","custom_install_script":"#!/bin/bash\r\nnpm config set strict-ssl false\r\n\r\n\r\n","custom_post_install_script":"","service_configurations":[{"publisher_namespace":"EnginesSystem","type_path":"filesystem/local/filesystem","variables":{"service_name":"_Engines_Builder(engine_name)","volume_src":"","engine_path":"node-red-data","permissions":"rw","user":"_Engines_Builder(data_uid)","group":"_Engines_Builder(data_gid)"}},{"publisher_namespace":"EnginesSystem","type_path":"database/sql/mysql","variables":{"db_flavor":"mysql2","db_password":"_Engines_System(random(10))","collation":"utf8_general_ci","full_access":"false","name":"_Engines_Builder(engine_name)","database_host":"_Engines_System(mysql_host)","db_username":"_Engines_Builder(engine_name)","database_name":"_Engines_Builder(engine_name)"}}],"persistent_directories":[],"replacement_strings":[],"persistent_files":[{"path":"app/settings.js"}],"installed_packages":[],"system_packages":[],"workers":[],"ports":[],"external_repositories":[],"rake_tasks":[],"template_files":[{"title":"settings.js","path":"app/settings.js","content":"/**\r\n * Copyright JS Foundation and other contributors, http://js.foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n\r\n// The `https` setting requires the `fs` module. Uncomment the following\r\n// to make it available:\r\n//var fs = require(\"fs\");\r\n\r\nmodule.exports = {\r\n    // the tcp port that the Node-RED web server is listening on\r\n    uiPort: process.env.PORT || 1880,\r\n\r\n    // By default, the Node-RED UI accepts connections on all IPv4 interfaces.\r\n    // The following property can be used to listen on a specific interface. For\r\n    // example, the following would only allow connections from the local machine.\r\n    //uiHost: \"127.0.0.1\",\r\n\r\n    // Retry time in milliseconds for MQTT connections\r\n    mqttReconnectTime: 15000,\r\n\r\n    // Retry time in milliseconds for Serial port connections\r\n    serialReconnectTime: 15000,\r\n\r\n    // Retry time in milliseconds for TCP socket connections\r\n    //socketReconnectTime: 10000,\r\n\r\n    // Timeout in milliseconds for TCP server socket connections\r\n    //  defaults to no timeout\r\n    //socketTimeout: 120000,\r\n\r\n    // Timeout in milliseconds for HTTP request connections\r\n    //  defaults to 120 seconds\r\n    //httpRequestTimeout: 120000,\r\n\r\n    // The maximum length, in characters, of any message sent to the debug sidebar tab\r\n    debugMaxLength: 1000,\r\n\r\n    // Colourise the console output of the debug node\r\n    //debugUseColors: true,\r\n\r\n    // The file containing the flows. If not set, it defaults to flows_\u003chostname\u003e.json\r\n    //flowFile: 'flows.json',\r\n\r\n    // To enabled pretty-printing of the flow within the flow file, set the following\r\n    //  property to true:\r\n    flowFilePretty: true,\r\n\r\n    // By default, credentials are encrypted in storage using a generated key. To\r\n    // specify your own secret, set the following property.\r\n  // By default, credentials are encrypted in storage using a generated key. To\r\n    // specify your own secret, set the following property.\r\n    // If you want to disable encryption of credentials, set this property to false.\r\n    // Note: once you set this property, do not change it - doing so will prevent\r\n    // node-red from being able to decrypt your existing credentials and they will be\r\n    // lost.\r\n    //credentialSecret: \"_Engines_System(random(14))\",\r\n\r\n    // By default, all user data is stored in the Node-RED install directory. To\r\n    // use a different location, the following property can be used\r\n    //userDir: '/home/nol/.node-red/',\r\n\r\n    // Node-RED scans the `nodes` directory in the install directory to find nodes.\r\n    // The following property can be used to specify an additional directory to scan.\r\n    //nodesDir: '/home/nol/.node-red/nodes',\r\n\r\n    // By default, the Node-RED UI is available at http://localhost:1880/\r\n    // The following property can be used to specifiy a different root path.\r\n    // If set to false, this is disabled.\r\n    //httpAdminRoot: '/admin',\r\n\r\n    // Some nodes, such as HTTP In, can be used to listen for incoming http requests.\r\n    // By default, these are served relative to '/'. The following property\r\n    // can be used to specifiy a different root path. If set to false, this is\r\n    // disabled.\r\n    //httpNodeRoot: '/red-nodes',\r\n\r\n    // The following property can be used in place of 'httpAdminRoot' and 'httpNodeRoot',\r\n    // to apply the same root to both parts.\r\n    //httpRoot: '/red',\r\n\r\n    // When httpAdminRoot is used to move the UI to a different root path, the\r\n    // following property can be used to identify a directory of static content\r\n    // that should be served at http://localhost:1880/.\r\n    //httpStatic: '/home/nol/node-red-static/',\r\n\r\n    // The maximum size of HTTP request that will be accepted by the runtime api.\r\n    // Default: 5mb\r\n    //apiMaxLength: '5mb',\r\n\r\n    // If you installed the optional node-red-dashboard you can set it's path\r\n    // relative to httpRoot\r\n    //ui: { path: \"ui\" },\r\n\r\n    // Securing Node-RED\r\n    // -----------------\r\n    // To password protect the Node-RED editor and admin API, the following\r\n    // property can be used. See http://nodered.org/docs/security.html for details.\r\n    adminAuth: {\r\n        type: \"credentials\",\r\n        users: [{\r\n            username: \"admin\",\r\n            password: \"_Engines_Builder(md5_sum(password))\",\r\n            permissions: \"*\"\r\n        }]\r\n    },\r\n\r\n    // To password protect the node-defined HTTP endpoints (httpNodeRoot), or\r\n    // the static content (httpStatic), the following properties can be used.\r\n    // The pass field is a bcrypt hash of the password.\r\n    // See http://nodered.org/docs/security.html#generating-the-password-hash\r\n   // The pass field is a bcrypt hash of the password.\r\n    // See http://nodered.org/docs/security.html#generating-the-password-hash\r\n    //httpNodeAuth: {user:\"user\",pass:\"$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN.\"},\r\n    //httpStaticAuth: {user:\"user\",pass:\"$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN.\"},\r\n\r\n    // The following property can be used to enable HTTPS\r\n    // See http://nodejs.org/api/https.html#https_https_createserver_options_requestlistener\r\n    // for details on its contents.\r\n    // See the comment at the top of this file on how to load the `fs` module used by\r\n    // this setting.\r\n    //\r\n    //https: {\r\n    //    key: fs.readFileSync('privatekey.pem'),\r\n    //    cert: fs.readFileSync('certificate.pem')\r\n    //},\r\n\r\n    // The following property can be used to cause insecure HTTP connections to\r\n    // be redirected to HTTPS.\r\n    //requireHttps: true\r\n\r\n    // The following property can be used to disable the editor. The admin API\r\n    // is not affected by this option. To disable both the editor and the admin\r\n    // API, use either the httpRoot or httpAdminRoot properties\r\n    //disableEditor: false,\r\n\r\n    // The following property can be used to configure cross-origin resource sharing\r\n    // in the HTTP nodes.\r\n    // See https://github.com/troygoode/node-cors#configuration-options for\r\n    // details on its contents. The following is a basic permissive set of options:\r\n    //httpNodeCors: {\r\n    //    origin: \"*\",\r\n    //    methods: \"GET,PUT,POST,DELETE\"\r\n    //},\r\n\r\n    // If you need to set an http proxy please set an environment variable\r\n    // called http_proxy (or HTTP_PROXY) outside of Node-RED in the operating system.\r\n    // For example - http_proxy=http://myproxy.com:8080\r\n    // (Setting it here will have no effect)\r\n    // You may also specify no_proxy (or NO_PROXY) to supply a comma separated\r\n    // list of domains to not proxy, eg - no_proxy=.acme.co,.acme.co.uk\r\n\r\n    // The following property can be used to add a custom middleware function\r\n    // in front of all http in nodes. This allows custom authentication to be\r\n    // applied to all http in nodes, or any other sort of common request processing.\r\n    //httpNodeMiddleware: function(req,res,next) {\r\n    //    // Handle/reject the request, or pass it on to the http in node by calling next();\r\n    //    // Optionally skip our rawBodyParser by setting this to true;\r\n    //    //req.skipRawBodyParser = true;\r\n    //    next();\r\n    //},\r\n\r\n    // Anything in this hash is globally available to all functions.\r\n    // It is accessed as context.global.\r\n    // eg:\r\n    //    functionGlobalContext: { os:require('os') }\r\n    // can be accessed in a function block as:\r\n    //    context.global.os\r\n\r\n    functionGlobalContext: {\r\n        // os:require('os'),\r\n        // octalbonescript:require('octalbonescript'),\r\n        // os:require('os'),\r\n        // octalbonescript:require('octalbonescript'),\r\n        // jfive:require(\"johnny-five\"),\r\n        // j5board:require(\"johnny-five\").Board({repl:false})\r\n    },\r\n\r\n    // The following property can be used to order the categories in the editor\r\n    // palette. If a node's category is not in the list, the category will get\r\n    // added to the end of the palette.\r\n    // If not set, the following default order is used:\r\n    //paletteCategories: ['subflows', 'input', 'output', 'function', 'social', 'mobile', 'storage', 'analysis', 'advanced'],\r\n\r\n    // Configure the logging output\r\n    logging: {\r\n        // Only console logging is currently supported\r\n        console: {\r\n            // Level of logging to be recorded. Options are:\r\n            // fatal - only those errors which make the application unusable should be recorded\r\n            // error - record errors which are deemed fatal for a particular request + fatal errors\r\n            // warn - record problems which are non fatal + errors + fatal errors\r\n            // info - record information about the general running of the application + warn + error + fatal errors\r\n            // debug - record information which is more verbose than info + info + warn + error + fatal errors\r\n            // trace - record very detailed logging + debug + info + warn + error + fatal errors\r\n            level: \"info\",\r\n            // Whether or not to include metric events in the log output\r\n            metrics: false,\r\n            // Whether or not to include audit events in the log output\r\n            audit: false\r\n        }\r\n    }\r\n}"}],"file_write_permissions":[],"custom_php_inis":[],"apache_htaccess_files":[],"apache_httpd_configurations":[],"modules":[{"os_package":"","module_name":"node-red-contrib-modbus","module_type":"npm"},{"os_package":"","module_name":"node-red-node-mysql","module_type":"npm"},{"os_package":"","module_name":"node-red","module_type":"npm"},{"os_package":"","module_name":"node-red-contrib-ui ","module_type":"npm"},{"os_package":"","module_name":"node-red-admin","module_type":"npm"}],"variables":[{"name":"Engines_Debug_Run","value":"true","label":"","field_type":"","select_collection":"","tooltip":"","hint":"","placeholder":"","comment":"","regex_validator":"","regex_invalid_message":"","mandatory":false,"ask_at_build_time":false,"build_time_only":false,"immutable":false}],"component_sources":[],"component_path":"","extract_components":false,"installation_report_template":"","continuous_deployment":false,"database_seed_file":"","actionators":{}}}